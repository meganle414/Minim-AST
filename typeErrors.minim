int integer; bool boolean; struct struct_1 { int x; int y;}; struct struct_1 struct_var; int function(){} int function_1(int integer){} void function_int(int integer){} void function_int_int(int int_1, int int_2){} void function_int_bool(int integer, bool boolean){} void function_bool_int(bool boolean, int integer){} void test_write(){ disp << function; disp << struct_1; disp << struct_var; disp << function_int(integer); } void test_read(){ input >> function; input >> struct_1; input >> struct_var; } void test_function_call(){ integer(); boolean(); struct_1(); struct_var(); function(boolean, integer); function(integer); function_int(integer, integer); function_int(); function_int_int(integer, integer, integer, integer, integer); function_int_bool(boolean, integer); function_bool_int(integer, boolean); function_int_bool(integer, integer); function_int_int(boolean, boolean); function_bool_int(boolean, boolean); } int f_i_2(){ return; } bool f_b_2(){ return; } void f_v_1(){ return integer; } void f_v_2(){ return boolean; } int f_i_1(){ return boolean; } bool f_b_1(){ return integer; } void f_v_3(){ return integer + boolean; } void f_v_4(){ return integer(); } void f_v_5(){ return boolean || integer; } void test_arithmetic() { integer = integer + boolean; integer = integer - boolean; integer = integer * boolean; integer = integer / boolean; integer = boolean + integer; integer = boolean - integer; integer = boolean * integer; integer = boolean / integer; integer = struct_1 + integer; integer = struct_1 - integer; integer = struct_1 * integer; integer = struct_1 / integer; integer = integer + struct_1; integer = integer - struct_1; integer = integer * struct_1; integer = integer / struct_1; integer = integer + struct_var; integer = integer - struct_var; integer = integer * struct_var; integer = integer / struct_var; integer = struct_var + integer; integer = struct_var - integer; integer = struct_var * integer; integer = struct_var / integer; integer = integer + function; integer = integer - function; integer = integer * function; integer = integer / function; integer = function + integer; integer = function - integer; integer = function * integer; integer = function / integer; boolean++; boolean--; struct_1++; struct_1--; struct_var++; struct_var--; function++; function--; } void test_logical() { boolean = !integer; boolean = integer && boolean; boolean = boolean && integer; boolean = integer && integer; boolean = integer || boolean; boolean = boolean || integer; boolean = integer || integer; boolean = !struct_1; boolean = struct_1 && boolean; boolean = boolean && struct_1; boolean = struct_1 && struct_1; boolean = struct_1 || boolean; boolean = boolean || struct_1; boolean = struct_1 || struct_1; boolean = !struct_var; boolean = struct_var && boolean; boolean = boolean && struct_var; boolean = struct_var && struct_var; boolean = struct_var || boolean; boolean = boolean || struct_var; boolean = struct_var || struct_var; boolean = !function; boolean = function && boolean; boolean = boolean && function; boolean = function && function; boolean = function || boolean; boolean = boolean || function; boolean = function || function; } void test_relational() { boolean = integer < boolean; boolean = integer > boolean; boolean = integer >= boolean; boolean = integer <= boolean; boolean = boolean < integer; boolean = boolean > integer; boolean = boolean >= integer; boolean = boolean <= integer; boolean = struct_1 < boolean; boolean = struct_1 > boolean; boolean = struct_1 >= boolean; boolean = struct_1 <= boolean; boolean = boolean < struct_1; boolean = boolean > struct_1; boolean = boolean >= struct_1; boolean = boolean <= struct_1; boolean = struct_var < boolean; boolean = struct_var > boolean; boolean = struct_var >= boolean; boolean = struct_var <= boolean; boolean = boolean < struct_var; boolean = boolean > struct_var; boolean = boolean >= struct_var; boolean = boolean <= struct_var; boolean = function < boolean; boolean = function > boolean; boolean = function >= boolean; boolean = function <= boolean; boolean = boolean < function; boolean = boolean > function; boolean = boolean >= function; boolean = boolean <= function; } void test_if() { if(integer) { integer = integer; } if(struct_1) { integer = integer; } if(struct_var) { integer = integer; } if(function) { integer = integer; } } void test_while() { while(integer) { integer = integer; } while(struct_1) { integer = integer; } while(struct_var) { integer = integer; } while(function) { integer = integer; } } void test_type_mismatch() { integer = boolean; boolean = integer; boolean = boolean == integer; boolean = integer == boolean; integer = ((boolean == integer) == boolean); struct_1 = boolean; boolean = struct_1; boolean = boolean == struct_1; boolean = struct_1 == boolean; struct_1 = ((boolean == struct_1) == boolean); struct_var = boolean; boolean = struct_var; boolean = boolean == struct_var; boolean = struct_var == boolean; struct_var = ((boolean == struct_var) == boolean); function = boolean; boolean = function; boolean = boolean == function; boolean = function == boolean; function = ((boolean == function) == boolean); } void test_equality() { boolean = function_int(integer) == function_int_int(integer, integer); boolean = function_int == function_int_int; boolean = struct_1 == struct_1; boolean = struct_var == struct_var; } void test_assignment() { function_int = function_int_int; struct_1 = struct_1; struct_var = struct_var; }