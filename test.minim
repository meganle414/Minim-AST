int f(){} void f_int(int integer){} void f_int_int(int int_1, int int_2){} void f_int_bool(int integer, bool boolean){} void f_bool_int(bool boolean, int integer){} void f_bool_bool(bool b1, bool b2){} struct struct_1{ int x; int y;}; struct struct_1 p; int integer; bool boolean; void test_write(){ disp << integer; disp << boolean; disp << f(); disp << p.x; disp << p.y; } void test_read(){ input >> integer; input >> boolean; input >> p.x; input >> p.y; } void test_function_call(){ f_int(integer); f_int_int(integer,integer); f_int_bool(integer,boolean); f_bool_int(boolean,integer); f_bool_bool(boolean,boolean); f_int_int(p.x, p.y); } int f_int_1(){ return integer; } bool f_bool_1(){ return boolean; } void f_void_1(){ return; } int f_int_2(){} bool f_bool_2(){} void f_void_2(){} void testArithmetic() { integer = integer + integer; integer = integer - integer; integer = integer * integer; integer = integer / integer; integer++; integer--; } void testLogical() { boolean = !boolean; boolean = boolean && boolean; boolean = boolean || boolean; } void testRelational() { boolean = integer < integer; boolean = integer > integer; boolean = integer <= integer; boolean = integer >= integer; } void test_if() { if(boolean) { integer = integer; } } void testWhile() { while(boolean) { integer = integer; } } void testEquality() { boolean = integer == integer; boolean = boolean == boolean; boolean = integer != integer; boolean = boolean != boolean; } void testAssignment() { integer = integer; integer = p.x; integer = p.y; boolean = boolean; boolean = p.x == p.y; }